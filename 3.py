# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то
# в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.


class Cell:
    def __init__(self, q):
        self.q = int(q)

    def __add__(self, other):
        return f'Сложение клеток привело к: {self.q + other.q}'

    def __sub__(self, other):
        try:
            sub = self.q - other.q
            if sub <= 0:
                return "Что-то пошло не так"
            else:
                return f"Вычитание клеток привело к: {sub}"
        except ZeroDivisionError as error:
            print(error)


    def __mul__(self, other):
        return self.q * other.q


    def __truediv__(self, other):
        return round(self.q / other.q)


    def make_order(self, row):
        result = ''
        for i in range(int(self.q / row)):
            result += '*' * row + '\n'
        result += '*' * (self.q % row) + '\n'
        return result


c_1 = Cell(25)
c_2 = Cell(12)
print(c_1 + c_2)
print(c_1 - c_2)
print(c_1 / c_2)
print(c_1 * c_2)
print(c_1.make_order(4))